{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/paris/Desktop/react-front-end-projects/Github searcher/src/components/users/SearchBar.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nexport class SearchBar extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      text: \"\"\n    };\n  }\n\n  //set a function for on change method, that sets the state for handling change value when user types\n  //this.setState({ text: event.target.value }); . this outputs the result of user's typing search\n  //in order to handle different fields use 'name' ase value on set state to handle these.\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  mySumbitHandler(event) {\n    //pass props and create a function. through this you create a method in order to search\n    this.props.searchUsers(this.state.text); //clear the form\n\n    this.setState({\n      text: \" \"\n    }); //console.log(\"submitted..\", this.state.text);\n\n    event.preventDefault();\n  }\n\n  render() {\n    this.handleChange = this.handleChange.bind(this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        action: \"#\",\n        onSubmit: this.mySumbitHandler.bind(this),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group mb-5\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text \",\n            className: \"form-control m-3\",\n            name: \"text\",\n            placeholder: \"Search for a user\" // value is connected with the state of text and the empty string\n            ,\n            value: this.state.text //we need an onChange event when we type something here that updates the state\n            ,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Search\",\n            className: \"btn btn-dark btn-lg m-3\\r \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: buttonStyle,\n        type: \"submit\",\n        value: \"Clear\",\n        className: \"btn btn-primary  m-3\",\n        onClick: this.props.clearUsersResults,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nSearchBar.propTypes = {\n  searchUsers: PropTypes.func.isRequired,\n  clearUsersResults: PropTypes.func.isRequired\n};\nconst buttonStyle = {\n  display: \"grid\",\n  gridTemplateColumns: \"repeat(1, 1fr)\",\n  gridGap: \"1rem\"\n};\nexport default SearchBar;","map":{"version":3,"sources":["/home/paris/Desktop/react-front-end-projects/Github searcher/src/components/users/SearchBar.js"],"names":["React","Component","PropTypes","SearchBar","state","text","handleChange","event","setState","target","name","value","mySumbitHandler","props","searchUsers","preventDefault","render","bind","buttonStyle","clearUsersResults","propTypes","func","isRequired","display","gridTemplateColumns","gridGap"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEvCG,KAFuC,GAE/B;AACNC,MAAAA,IAAI,EAAE;AADA,KAF+B;AAAA;;AAYvC;AACA;AACA;AAEAC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAClB,SAAKC,QAAL,CAAc;AAAE,OAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AAApC,KAAd;AACD;;AAEDC,EAAAA,eAAe,CAACL,KAAD,EAAQ;AACrB;AACA,SAAKM,KAAL,CAAWC,WAAX,CAAuB,KAAKV,KAAL,CAAWC,IAAlC,EAFqB,CAIrB;;AACA,SAAKG,QAAL,CAAc;AAAEH,MAAAA,IAAI,EAAE;AAAR,KAAd,EALqB,CAMrB;;AACAE,IAAAA,KAAK,CAACQ,cAAN;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,SAAKV,YAAL,GAAoB,KAAKA,YAAL,CAAkBW,IAAlB,CAAuB,IAAvB,CAApB;AAEA,wBACE;AAAA,8BAEE;AACE,QAAA,SAAS,EAAC,MADZ;AAEE,QAAA,MAAM,EAAC,GAFT;AAGE,QAAA,QAAQ,EAAE,KAAKL,eAAL,CAAqBK,IAArB,CAA0B,IAA1B,CAHZ;AAAA,+BAKE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,OADP;AAEE,YAAA,SAAS,EAAC,kBAFZ;AAGE,YAAA,IAAI,EAAC,MAHP;AAIE,YAAA,WAAW,EAAC,mBAJd,CAKE;AALF;AAME,YAAA,KAAK,EAAE,KAAKb,KAAL,CAAWC,IANpB,CAOE;AAPF;AAQE,YAAA,QAAQ,EAAE,KAAKC;AARjB;AAAA;AAAA;AAAA;AAAA,kBADF,eAcE;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,KAAK,EAAC,QAFR;AAGE,YAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,kBAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,cAFF,eA+BE;AACE,QAAA,KAAK,EAAEY,WADT;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAC,OAHR;AAIE,QAAA,SAAS,EAAC,sBAJZ;AAKE,QAAA,OAAO,EAAE,KAAKL,KAAL,CAAWM,iBALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA2CD;;AA3EsC;AAA5BhB,S,CAMJiB,S,GAAY;AACjBN,EAAAA,WAAW,EAAEZ,SAAS,CAACmB,IAAV,CAAeC,UADX;AAGjBH,EAAAA,iBAAiB,EAAEjB,SAAS,CAACmB,IAAV,CAAeC;AAHjB,C;AAwErB,MAAMJ,WAAW,GAAG;AAClBK,EAAAA,OAAO,EAAE,MADS;AAElBC,EAAAA,mBAAmB,EAAE,gBAFH;AAGlBC,EAAAA,OAAO,EAAE;AAHS,CAApB;AAMA,eAAetB,SAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class SearchBar extends Component {\r\n  //initiate and attach state at the input text\r\n  state = {\r\n    text: \"\",\r\n  };\r\n\r\n  static propTypes = {\r\n    searchUsers: PropTypes.func.isRequired,\r\n\r\n    clearUsersResults: PropTypes.func.isRequired,\r\n  };\r\n\r\n  //set a function for on change method, that sets the state for handling change value when user types\r\n  //this.setState({ text: event.target.value }); . this outputs the result of user's typing search\r\n  //in order to handle different fields use 'name' ase value on set state to handle these.\r\n\r\n  handleChange(event) {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n\r\n  mySumbitHandler(event) {\r\n    //pass props and create a function. through this you create a method in order to search\r\n    this.props.searchUsers(this.state.text);\r\n\r\n    //clear the form\r\n    this.setState({ text: \" \" });\r\n    //console.log(\"submitted..\", this.state.text);\r\n    event.preventDefault();\r\n  }\r\n  render() {\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n    return (\r\n      <div>\r\n        {/* At this point i construct a form in which I set a text area and button for search users */}\r\n        <form\r\n          className='form'\r\n          action='#'\r\n          onSubmit={this.mySumbitHandler.bind(this)}\r\n        >\r\n          <div className='input-group mb-5'>\r\n            <input\r\n              type='text '\r\n              className='form-control m-3'\r\n              name='text'\r\n              placeholder='Search for a user'\r\n              // value is connected with the state of text and the empty string\r\n              value={this.state.text}\r\n              //we need an onChange event when we type something here that updates the state\r\n              onChange={this.handleChange}\r\n            />\r\n\r\n            {/* At this point i set a submit button which i''ll click to get the search result of users  */}\r\n\r\n            <input\r\n              type='submit'\r\n              value='Search'\r\n              className='btn btn-dark btn-lg m-3\r\n              '\r\n            />\r\n          </div>\r\n        </form>\r\n        {/* Add clear button functionality */}\r\n\r\n        <button\r\n          style={buttonStyle}\r\n          type='submit'\r\n          value='Clear'\r\n          className='btn btn-primary  m-3'\r\n          onClick={this.props.clearUsersResults}\r\n        >\r\n          Clear\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst buttonStyle = {\r\n  display: \"grid\",\r\n  gridTemplateColumns: \"repeat(1, 1fr)\",\r\n  gridGap: \"1rem\",\r\n};\r\n\r\nexport default SearchBar;\r\n"]},"metadata":{},"sourceType":"module"}