{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/paris/Desktop/react-front-end-projects/Github searcher/src/App.js\";\nimport React, { Component } from \"react\";\nimport Navbar from \"./components/layouts/Navbar\";\nimport Users from \"./components/users/Users\";\nimport SearchBar from \"./components/users/SearchBar\";\nimport Alert from \"./components/layouts/Alert\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      users: [],\n      //set loading for fetching data.loading is set to false when we don't fetch\n      loading: false,\n      //i added a state for alert \n      alert: null\n    };\n\n    this.searchUsers = async text => {\n      this.setState({\n        loading: true\n      }); //this makes a request to github api for fetching users\n\n      const res = await axios.get(`https://api.github.com/search/users?q=${text}`); //once we fetch the data we have setState() to re-set the state to false and get the results\n\n      this.setState({\n        users: res.data.items,\n        loading: false\n      }); // console.log(text);\n    };\n\n    this.clearUsersResults = () => this.setState({\n      users: [],\n      loading: false\n    });\n\n    this.setAlert = (msg, type) => {\n      this.setState({\n        alert: {\n          msg,\n          type\n        }\n      });\n    };\n  }\n\n  async componentDidMount() {\n    //although you need to use setState() cycle method to change the status of loading\n    this.setState({\n      loading: true\n    }); //this makes a request to github api for fetching users\n\n    const res = await axios.get(\"https://api.github.com/users\"); //once we fetch the data we have setState() to re-set the state to false and get the results\n\n    this.setState({\n      users: res.data,\n      loading: false\n    }); //once we get a response, we'll map the API results to our props\n    //console.log(res.data);\n  } //define a function for searching users\n\n\n  render() {\n    //destructure props\n    const {\n      users,\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Alert, {\n          alert: \"this.state.alert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n          searchUsers: this.searchUsers,\n          clearUsersResults: this.clearUsersResults,\n          setAlert: this.setAlert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Users, {\n          loading: loading,\n          users: users\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/paris/Desktop/react-front-end-projects/Github searcher/src/App.js"],"names":["React","Component","Navbar","Users","SearchBar","Alert","axios","App","state","users","loading","alert","searchUsers","text","setState","res","get","data","items","clearUsersResults","setAlert","msg","type","componentDidMount","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BO,KAF0B,GAElB;AACNC,MAAAA,KAAK,EAAE,EADD;AAEN;AACAC,MAAAA,OAAO,EAAE,KAHH;AAIN;AACAC,MAAAA,KAAK,EAAE;AALD,KAFkB;;AAAA,SAwB1BC,WAxB0B,GAwBZ,MAAOC,IAAP,IAAgB;AAC5B,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,OAAO,EAAE;AAAX,OAAd,EAD4B,CAE5B;;AACA,YAAMK,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CACf,yCAAwCH,IAAK,EAD9B,CAAlB,CAH4B,CAO5B;;AACA,WAAKC,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAEM,GAAG,CAACE,IAAJ,CAASC,KAAlB;AAAyBR,QAAAA,OAAO,EAAE;AAAlC,OAAd,EAR4B,CAS5B;AACD,KAlCyB;;AAAA,SAqC1BS,iBArC0B,GAqCN,MAAM,KAAKL,QAAL,CAAc;AAAEL,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,OAAO,EAAE;AAAtB,KAAd,CArCA;;AAAA,SAyC1BU,QAzC0B,GAyCf,CAACC,GAAD,EAAKC,IAAL,KAAa;AAEtB,WAAKR,QAAL,CAAc;AAACH,QAAAA,KAAK,EAAC;AAACU,UAAAA,GAAD;AAAKC,UAAAA;AAAL;AAAP,OAAd;AAED,KA7CyB;AAAA;;AAU1B,QAAMC,iBAAN,GAA0B;AACxB;AACA,SAAKT,QAAL,CAAc;AAAEJ,MAAAA,OAAO,EAAE;AAAX,KAAd,EAFwB,CAGxB;;AACA,UAAMK,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,8BAAV,CAAlB,CAJwB,CAMxB;;AACA,SAAKF,QAAL,CAAc;AAAEL,MAAAA,KAAK,EAAEM,GAAG,CAACE,IAAb;AAAmBP,MAAAA,OAAO,EAAE;AAA5B,KAAd,EAPwB,CAQxB;AACA;AACD,GApByB,CAuB1B;;;AAwBAc,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEf,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAqB,KAAKF,KAAhC;AAEA,wBACE;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAE,WAAhB;AAAA,gCAED,QAAC,KAAD;AAAO,UAAA,KAAK,EAAI;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFC,eAGA,QAAC,SAAD;AACE,UAAA,WAAW,EAAE,KAAKI,WADpB;AAEE,UAAA,iBAAiB,EAAE,KAAKO,iBAF1B;AAGE,UAAA,QAAQ,EAAI,KAAKC;AAHnB;AAAA;AAAA;AAAA;AAAA,gBAHA,eASA,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEV,OAAhB;AAAyB,UAAA,KAAK,EAAED;AAAhC;AAAA;AAAA;AAAA;AAAA,gBATA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAnEyB;;AAsE5B,eAAeF,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"./components/layouts/Navbar\";\nimport Users from \"./components/users/Users\";\nimport SearchBar from \"./components/users/SearchBar\";\nimport Alert from \"./components/layouts/Alert\"\nimport axios from \"axios\";\n\nclass App extends Component {\n  //state declares an empty array where\n  state = {\n    users: [],\n    //set loading for fetching data.loading is set to false when we don't fetch\n    loading: false,\n    //i added a state for alert \n    alert: null\n  };\n\n  async componentDidMount() {\n    //although you need to use setState() cycle method to change the status of loading\n    this.setState({ loading: true });\n    //this makes a request to github api for fetching users\n    const res = await axios.get(\"https://api.github.com/users\");\n\n    //once we fetch the data we have setState() to re-set the state to false and get the results\n    this.setState({ users: res.data, loading: false });\n    //once we get a response, we'll map the API results to our props\n    //console.log(res.data);\n  }\n\n\n  //define a function for searching users\n  searchUsers = async (text) => {\n    this.setState({ loading: true });\n    //this makes a request to github api for fetching users\n    const res = await axios.get(\n      `https://api.github.com/search/users?q=${text}`\n    );\n\n    //once we fetch the data we have setState() to re-set the state to false and get the results\n    this.setState({ users: res.data.items, loading: false });\n    // console.log(text);\n  };\n  //define a function method for clearing users\n\n  clearUsersResults = () => this.setState({ users: [], loading: false });\n\n\n  //define a function for set alert \n  setAlert = (msg,type) =>{\n\n    this.setState({alert:{msg,type}})\n\n  }\n\n  render() {\n    //destructure props\n    const { users, loading } = this.state;\n\n    return (\n      <div>\n        <Navbar />\n        <div className =\"container\">\n          \n       <Alert alert = {\"this.state.alert\"}/>\n        <SearchBar\n          searchUsers={this.searchUsers}\n          clearUsersResults={this.clearUsersResults}\n          setAlert = {this.setAlert}\n        />\n\n        <Users loading={loading} users={users} />\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}