{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/paris/Desktop/react-front-end-projects/Github searcher/src/App.js\";\nimport React, { Fragment, Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from \"./components/layouts/Navbar\";\nimport Users from \"./components/users/Users\";\nimport SearchBar from \"./components/users/SearchBar\";\nimport About from \"./components/pages/About\";\nimport Alert from \"./components/layouts/Alert\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      users: [],\n      user: {},\n      //set loading for fetching data.loading is set to false when we don't fetch\n      loading: false,\n      //i added a state for alert \n      alert: null\n    };\n\n    this.searchUsers = async text => {\n      this.setState({\n        loading: true\n      }); //this makes a request to github api for fetching users\n\n      const res = await axios.get(`https://api.github.com/search/users?q=${text}`); //once we fetch the data we have setState() to re-set the state to false and get the results\n\n      this.setState({\n        users: res.data.items,\n        loading: false\n      }); // console.log(text);\n    };\n\n    this.getUser = async username => {\n      this.setState({\n        loading: true\n      }); //this makes a request to github api for fetching users\n\n      const res = await axios.get(`https://api.github.com/users/${username}`); //once we fetch the data we have setState() to re-set the state to false and get the results\n\n      this.setState({\n        user: res.data,\n        loading: false\n      });\n    };\n\n    this.clearUsersResults = () => this.setState({\n      users: [],\n      loading: false\n    });\n\n    this.setAlert = (msg, type) => {\n      this.setState({\n        alert: {\n          msg,\n          type\n        }\n      }); //set timeout for the message appearance \n\n      setTimeout(() => {\n        this.setState({\n          alert: null\n        });\n      }, 3000);\n    };\n  }\n\n  async componentDidMount() {\n    //although you need to use setState() cycle method to change the status of loading\n    this.setState({\n      loading: true\n    }); //this makes a request to github api for fetching users\n\n    const res = await axios.get(\"https://api.github.com/users\"); //once we fetch the data we have setState() to re-set the state to false and get the results\n\n    this.setState({\n      users: res.data,\n      loading: false\n    }); //once we get a response, we'll map the API results to our props\n    //console.log(res.data);\n  } //define a function for searching users\n\n\n  render() {\n    //destructure props\n    const {\n      users,\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(Alert, {\n            alert: this.state.alert\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/\",\n              render: props => /*#__PURE__*/_jsxDEV(Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n                  searchUsers: this.searchUsers,\n                  clearUsersResults: this.clearUsersResults,\n                  setAlert: this.setAlert\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(Users, {\n                  loading: loading,\n                  users: users\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 12\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 10\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/about\",\n              component: About\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 10\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/paris/Desktop/react-front-end-projects/Github searcher/src/App.js"],"names":["React","Fragment","Component","BrowserRouter","Router","Switch","Route","Navbar","Users","SearchBar","About","Alert","axios","App","state","users","user","loading","alert","searchUsers","text","setState","res","get","data","items","getUser","username","clearUsersResults","setAlert","msg","type","setTimeout","componentDidMount","render","props"],"mappings":"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","sourcesContent":["import React, { Fragment,Component } from \"react\";\nimport{ BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Navbar from \"./components/layouts/Navbar\";\nimport Users from \"./components/users/Users\";\nimport SearchBar from \"./components/users/SearchBar\";\nimport About from \"./components/pages/About\"\nimport Alert from \"./components/layouts/Alert\"\nimport axios from \"axios\";\n\nclass App extends Component {\n  //state declares an empty array where\n  state = {\n    users: [],\n    user: {},\n    //set loading for fetching data.loading is set to false when we don't fetch\n    loading: false,\n    //i added a state for alert \n    alert: null\n  };\n\n  async componentDidMount() {\n    //although you need to use setState() cycle method to change the status of loading\n    this.setState({ loading: true });\n    //this makes a request to github api for fetching users\n    const res = await axios.get(\"https://api.github.com/users\");\n\n    //once we fetch the data we have setState() to re-set the state to false and get the results\n    this.setState({ users: res.data, loading: false });\n    //once we get a response, we'll map the API results to our props\n    //console.log(res.data);\n  }\n\n\n  //define a function for searching users\n  searchUsers = async (text) => {\n    this.setState({ loading: true });\n    //this makes a request to github api for fetching users\n    const res = await axios.get(\n      `https://api.github.com/search/users?q=${text}`\n    );\n\n    //once we fetch the data we have setState() to re-set the state to false and get the results\n    this.setState({ users: res.data.items, loading: false });\n    // console.log(text);\n  };\n\n  //Get a single github user\n\n  getUser = async( username)=>{\n    this.setState({ loading: true });\n     //this makes a request to github api for fetching users\n     const res = await axios.get(\n      `https://api.github.com/users/${username}`\n    );\n\n    //once we fetch the data we have setState() to re-set the state to false and get the results\n    this.setState({ user: res.data, loading: false });\n\n\n  }\n\n  //define a function method for clearing users\n\n  clearUsersResults = () => this.setState({ users: [], loading: false });\n\n\n\n  //define a function for set alert \n\n  \n  setAlert = (msg,type) =>{\n    this.setState({alert:{msg,type}})\n\n    //set timeout for the message appearance \n    setTimeout(()=>{ \n      this.setState ({ alert: null})}, 3000);\n\n  }\n\n  render() {\n    //destructure props\n    const { users, loading } = this.state;\n\n    return (\n      <Router>\n      <div>\n        <Navbar />\n        <div className =\"container\">\n          \n       <Alert alert = {this.state.alert}/>\n       <Switch>\n         <Route exact path = \"/\" render = {props=>(\n           <Fragment>\n              <SearchBar\n                searchUsers={this.searchUsers}\n                clearUsersResults={this.clearUsersResults}\n                setAlert = {this.setAlert}\n              />\n              <Users loading={loading} users={users} />\n          </Fragment>\n         )} />\n\n         <Route exact path = \"/about\" component = {About} />\n       </Switch>\n      </div>\n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}